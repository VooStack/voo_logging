// Mocks generated by Mockito 5.4.6 from annotations
// in voo_logging/test/features/session_replay/presentation/session_replay_tracker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:voo_logging/features/session_replay/domain/entities/session_recording.dart'
    as _i2;
import 'package:voo_logging/features/session_replay/domain/repositories/session_recording_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSessionRecording_0 extends _i1.SmartFake
    implements _i2.SessionRecording {
  _FakeSessionRecording_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SessionRecordingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionRecordingRepository extends _i1.Mock
    implements _i3.SessionRecordingRepository {
  MockSessionRecordingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.SessionRecording> get recordingStream =>
      (super.noSuchMethod(
            Invocation.getter(#recordingStream),
            returnValue: _i4.Stream<_i2.SessionRecording>.empty(),
          )
          as _i4.Stream<_i2.SessionRecording>);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  _i4.Future<void> startRecording({
    required String? sessionId,
    required String? userId,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, [], {
              #sessionId: sessionId,
              #userId: userId,
              #metadata: metadata,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addEvent(_i2.SessionEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#addEvent, [event]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.SessionRecording?> getCurrentRecording() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentRecording, []),
            returnValue: _i4.Future<_i2.SessionRecording?>.value(),
          )
          as _i4.Future<_i2.SessionRecording?>);

  @override
  _i4.Future<List<_i2.SessionRecording>> getRecordings({
    String? userId,
    DateTime? startDate,
    DateTime? endDate,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getRecordings, [], {
              #userId: userId,
              #startDate: startDate,
              #endDate: endDate,
              #limit: limit,
            }),
            returnValue: _i4.Future<List<_i2.SessionRecording>>.value(
              <_i2.SessionRecording>[],
            ),
          )
          as _i4.Future<List<_i2.SessionRecording>>);

  @override
  _i4.Future<_i2.SessionRecording?> getRecording(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getRecording, [id]),
            returnValue: _i4.Future<_i2.SessionRecording?>.value(),
          )
          as _i4.Future<_i2.SessionRecording?>);

  @override
  _i4.Future<void> deleteRecording(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecording, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOldRecordings(Duration? age) =>
      (super.noSuchMethod(
            Invocation.method(#deleteOldRecordings, [age]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> getTotalStorageSize() =>
      (super.noSuchMethod(
            Invocation.method(#getTotalStorageSize, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> exportRecording(String? id, String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#exportRecording, [id, filePath]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.SessionRecording> importRecording(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#importRecording, [filePath]),
            returnValue: _i4.Future<_i2.SessionRecording>.value(
              _FakeSessionRecording_0(
                this,
                Invocation.method(#importRecording, [filePath]),
              ),
            ),
          )
          as _i4.Future<_i2.SessionRecording>);
}
